# vim:ft=gitconfig

[user]
    name = Kenny Pitt
    email = {{ .email }}

[core]
    excludesfile = ~/.gitignore
    quotepath = false
{{- if eq .chezmoi.os "windows" }}
    autocrlf = true
{{- else }}
    autocrlf = input
{{- end }}
    untrackedCache = true

[color]
    ui = auto

[push]
    default = upstream

[merge]
    summary = true

[mergetool "smerge"]
	cmd = smerge mergetool \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
	trustExitCode = true

[alias]

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # Additional git log aliases
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

    # View the current working tree status using the short format
    s = status -s
    sb = status -sb

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat | diff-so-fancy"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Shortcuts for stashes
    stashes = stash list

    sapply = stash apply
    sdrop = stash drop
    slist = stash list
    spop = stash pop

    # List aliases
    aliases = "!git config -l | grep '^alias\\.' | cut -c 7-"

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Shortcuts for various types of merges
    ff = merge --ff-only
    rb = rebase
    rbi = rebase --interactive

    ## Shortcuts for accessing remote repositories

    # Clone a repository including all submodules
    c = clone --recursive
    # Make a blobless clone (all commits and trees, but only checked out blobs)
    cnb = clone --filter=blob:none
    # Make a treeless clone (all commits, but only checked out trees and blobs)
    cnt = clone --filter=tree:0

    # Pull in remote changes for the current repository and all its submodules
    p = pull --recurse-submodules
    # Pull remote changes with fast-forward merge
    pff = pull --ff-only --recurse-submodules
    # Pull remote changes with rebase
    prb = pull --rebase --recurse-submodules

    # Fetch remote changes for the current repository and all its submodules
    f = fetch --prune --recurse-submodules

    # Basic convenience shortcuts
    ci = commit
    co = checkout
    cob = checkout -b
 
    ## Shortcuts for working with submodules
    sm = submodule
    sma = submodule add
    smd = submodule deinit
    sms = submodule status --recursive
    smi = submodule init
    smu = submodule update --init --recursive
    smeach = submodule foreach
    smeachr = submodule foreach --recursive

    ## Shortcuts for working with worktrees
    wt = worktree
    wta = worktree add
    wtl = worktree list
    wtmv = worktree move
    wtrm = worktree remove

    ## Shortcuts for update-index commands
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = !git ls-files -v | grep ^h | cut -c 3-
    assumeall = !git status -s | grep -v ^\\?\\? | awk {'print $2'} | xargs git assume
    unassumeall = !git assumed | xargs git update-index --no-assume-unchanged

    lock = update-index --skip-worktree
    unlock = update-index --no-skip-worktree
    locked = !git ls-files -v | grep ^S | cut -c 3-
    lockall = !git status -s | grep -v ^\\?\\? | awk {'print $2'} | xargs git lock
    unlockall = !git locked | xargs git update-index --no-skip-worktree

    ## External merge tool shortcuts
    p4diff  = difftool -y --tool=p4merge
    p4merge = mergetool -y --tool=p4merge

    bcdiff  = difftool -y --tool=bc3 --trust-exit-code
    bcmerge = mergetool -y --tool=bc3

    smmerge = mergetool -y --tool=bc3

    ## GitHub Flow aliases 
    ## (see <https://haacked.com/archive/2014/07/28/github-flow-aliases/>)
    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = commit -am 'WIP'
    undo = reset HEAD~1 --mixed
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    default-branch = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
    merged = "!f() { DEFAULT=$(git default-branch); git branch --merged ${1-$DEFAULT} | grep -v " ${1-$DEFAULT}$"; }; f"
    bclean = "!f() { DEFAULT=$(git default-branch); git merged ${1-$DEFAULT} | xargs git branch -d; }; f"

[url "git@github.com:"]
    insteadOf = gh:
[url "git@bitbucket.org"]
    insteadOf = bb:

[hub]
	protocol = ssh

[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f

[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    plus-style = "syntax #344E56"
    plus-emph-style = "syntax #2E696F"
    minus-style = "syntax #494049"
    minus-emph-style = "syntax #67414B"
    syntax-theme = Coldark-Dark
    navigate = true
    line-numbers = true

# Optional extension files (last value wins, so order is important)
[include]
    # work can override personal
    path = ~/.gitconfig-work
    # local can override anything
    path = ~/.gitconfig-local
